/* 
 * Needham-Schroeder-Lowe protocol,
 * broken version (wrong role name in first message)
 */

// The protocol description
usertype String;
const V1: String;


protocol nsl3-broken(I,R)
{
	role I
	{
		fresh ni: Nonce;
		var nr: Nonce;

		send_1(I,R,V1, {ni,R}pk(R) );
		recv_2(R,I,V1, {ni,nr,R}pk(I) );
		send_3(I,R, V1,{nr}pk(R) );

		claim_i1(I,Secret,ni);
		claim_i2(I,Secret,nr);
		claim_i3(I,Niagree);
		claim_i4(I,Nisynch);
	}	
	
	role R
	{
		var ni: Nonce;
		fresh nr: Nonce;

		recv_1(I,R,V1, {ni,R}pk(R) );
		send_2(R,I, V1,{ni,nr,R}pk(I) );
		recv_3(I,R, V1,{nr}pk(R) );

		claim_r1(R,Secret,ni);
		claim_r2(R,Secret,nr);
		claim_r3(R,Niagree);
		claim_r4(R,Nisynch);
	}
}

/* 
 * Needham-Schroeder-Lowe protocol,
 * broken version (wrong role name in first message)
 */

// The protocol description
const V2: String;


protocol nsl3-broken-fixed(I,R)
{
	role I
	{
		fresh ni: Nonce;
		var nr: Nonce;

		send_1(I,R,V2,  {ni,I}pk(R) );
		recv_2(R,I, V2,{ni,nr,R}pk(I) );
		send_3(I,R,V2, {nr}pk(R) );

		claim_i1(I,Secret,ni);
		claim_i2(I,Secret,nr);
		claim_i3(I,Niagree);
		claim_i4(I,Nisynch);
	}	
	
	role R
	{
		var ni: Nonce;
		fresh nr: Nonce;

		recv_1(I,R, V2,{ni,I}pk(R) );
		send_2(R,I,V2, {ni,nr,R}pk(I) );
		recv_3(I,R, V2,{nr}pk(R) );

		claim_r1(R,Secret,ni);
		claim_r2(R,Secret,nr);
		claim_r3(R,Niagree);
		claim_r4(R,Nisynch);
	}
}


